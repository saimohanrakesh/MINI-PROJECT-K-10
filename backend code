import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,recall_score,f1_score,precision_score

temp='itching	skin_rash	nodal_skin_eruptions	continuous_sneezing	shivering	chills	joint_pain	stomach_pain	acidity	ulcers_on_tongue	muscle_wasting	vomiting	burning_micturition	spotting_urination	fatigue	weight_gain	anxiety	cold_hands_and_feets	mood_swings	weight_loss	restlessness	lethargy	patches_in_throat	irregular_sugar_level	cough	high_fever	sunken_eyes	breathlessness	sweating	dehydration	indigestion	headache	yellowish_skin	dark_urine	nausea	loss_of_appetite	pain_behind_the_eyes	back_pain	constipation	abdominal_pain	diarrhoea	mild_fever	yellow_urine	yellowing_of_eyes	acute_liver_failure	fluid_overload	swelling_of_stomach	swelled_lymph_nodes	malaise	blurred_and_distorted_vision	phlegm	throat_irritation	redness_of_eyes	sinus_pressure	runny_nose	congestion	chest_pain	weakness_in_limbs	fast_heart_rate	pain_during_bowel_movements	pain_in_anal_region	bloody_stool	irritation_in_anus	neck_pain	dizziness	cramps	bruising	obesity	swollen_legs	swollen_blood_vessels	puffy_face_and_eyes	enlarged_thyroid	brittle_nails	swollen_extremeties	excessive_hunger	extra_marital_contacts	drying_and_tingling_lips	slurred_speech	knee_pain	hip_joint_pain	muscle_weakness	stiff_neck	swelling_joints	movement_stiffness	spinning_movements	loss_of_balance	unsteadiness	weakness_of_one_body_side	loss_of_smell	bladder_discomfort	foul_smell_of_urine	continuous_feel_of_urine	passage_of_gases	internal_itching	toxic_look_(typhos)	depression	irritability	muscle_pain	altered_sensorium	red_spots_over_body	belly_pain	abnormal_menstruation	dischromic_patches	watering_from_eyes	increased_appetite	polyuria	family_history	mucoid_sputum	rusty_sputum	lack_of_concentration	visual_disturbances	receiving_blood_transfusion	receiving_unsterile_injections	coma	stomach_bleeding	distention_of_abdomen	history_of_alcohol_consumption	fluid_overload	blood_in_sputum	prominent_veins_on_calf	palpitations	painful_walking	pus_filled_pimples	blackheads	scurring	skin_peeling	silver_like_dusting	small_dents_in_nails	inflammatory_nails	blister	red_sore_around_nose	yellow_crust_ooze'
symptoms=temp.split()


disease=['Fungal infection','Allergy','GERD','Chronic cholestasis','Drug Reaction',
'Peptic ulcer diseae','AIDS','Diabetes','Gastroenteritis','Bronchial Asthma','Hypertension',
' Migraine','Cervical spondylosis',
'Paralysis (brain hemorrhage)','Jaundice','Malaria','Chicken pox','Dengue','Typhoid','hepatitis A',
'Hepatitis B','Hepatitis C','Hepatitis D','Hepatitis E','Alcoholic hepatitis','Tuberculosis',
'Common Cold','Pneumonia','Dimorphic hemmorhoids(piles)',
'Heartattack','Varicoseveins','Hypothyroidism','Hyperthyroidism','Hypoglycemia','Osteoarthristis',
'Arthritis','(vertigo) Paroymsal  Positional Vertigo','Acne','Urinary tract infection','Psoriasis',
'Impetigo']


#reading csv file
#As according to the base paper the datasets are given in manner of seperated datasets and training sets

data_training = pd.read_csv('Training.csv')
data_training.replace({'prognosis':{'Fungal infection':0,'Allergy':1,'GERD':2,'Chronic cholestasis':3,'Drug Reaction':4,
'Peptic ulcer diseae':5,'AIDS':6,'Diabetes ':7,'Gastroenteritis':8,'Bronchial Asthma':9,'Hypertension ':10,
'Migraine':11,'Cervical spondylosis':12,
'Paralysis (brain hemorrhage)':13,'Jaundice':14,'Malaria':15,'Chicken pox':16,'Dengue':17,'Typhoid':18,'hepatitis A':19,
'Hepatitis B':20,'Hepatitis C':21,'Hepatitis D':22,'Hepatitis E':23,'Alcoholic hepatitis':24,'Tuberculosis':25,
'Common Cold':26,'Pneumonia':27,'Dimorphic hemmorhoids(piles)':28,'Heart attack':29,'Varicose veins':30,'Hypothyroidism':31,
'Hyperthyroidism':32,'Hypoglycemia':33,'Osteoarthristis':34,'Arthritis':35,
'(vertigo) Paroymsal  Positional Vertigo':36,'Acne':37,'Urinary tract infection':38,'Psoriasis':39,
'Impetigo':40}},inplace=True)

x_train = data_training.iloc[:,:-1].values
y_train=data_training.iloc[:,-1].values

data_testing = pd.read_csv('Testing.csv')
data_testing.replace({'prognosis':{'Fungal infection':0,'Allergy':1,'GERD':2,'Chronic cholestasis':3,'Drug Reaction':4,
'Peptic ulcer diseae':5,'AIDS':6,'Diabetes ':7,'Gastroenteritis':8,'Bronchial Asthma':9,'Hypertension ':10,
'Migraine':11,'Cervical spondylosis':12,
'Paralysis (brain hemorrhage)':13,'Jaundice':14,'Malaria':15,'Chicken pox':16,'Dengue':17,'Typhoid':18,'hepatitis A':19,
'Hepatitis B':20,'Hepatitis C':21,'Hepatitis D':22,'Hepatitis E':23,'Alcoholic hepatitis':24,'Tuberculosis':25,
'Common Cold':26,'Pneumonia':27,'Dimorphic hemmorhoids(piles)':28,'Heart attack':29,'Varicose veins':30,'Hypothyroidism':31,
'Hyperthyroidism':32,'Hypoglycemia':33,'Osteoarthristis':34,'Arthritis':35,
'(vertigo) Paroymsal  Positional Vertigo':36,'Acne':37,'Urinary tract infection':38,'Psoriasis':39,
'Impetigo':40}},inplace=True)

x_test = data_testing.iloc[:,:-1].values
y_test = data_testing.iloc[:,-1].values

#preparing classifiers
#support vector machine
def svc(x):
    svc_classifier = SVC()
    svc_classifier.fit(x_train,y_train)
    return svc_classifier.predict(x)

#Navie bayes method 
def naive(x):
    naive_classifier = GaussianNB()
    naive_classifier.fit(x_train,y_train)
    return naive_classifier.predict(x)


#Decision tree classifier
def DTC(x):
    DTC_classifier = DecisionTreeClassifier(criterion='entropy')
    DTC_classifier.fit(x_train,y_train)
    return DTC_classifier.predict(x)


#from Random Forest Classifier
def RFC(x):
    RFC_classifier = RandomForestClassifier(n_estimators=100,criterion='entropy')
    RFC_classifier.fit(x_train,y_train)
    return RFC_classifier.predict(x)


#taking input from user
while True:
    n=int(input(' 1.prediction \n 2.end\n'))
    if n==1:
        l1=[]
        for i in range(len(symptoms)):
            l1.append(0)
        
        for i in range(5):
            temp=input('enter  your symptom: ')
            for j in range(len(symptoms)):
                if temp=='None':
                    break
                elif symptoms[j]==temp:
                    print('ok')
                    l1[j]=1
                    break
        symp=np.array([l1])
        print(disease[int(svc(symp))])
        print(disease[int(naive(symp))])
        print(disease[int(DTC(symp))])
        print(disease[int(RFC(symp))])
    else:
        break


#for calculating metrics
y_pred_svc= svc(x_test)
y_pred_DTC = DTC(x_test)
y_pred_naive = naive(x_test)
y_pred_RFC = RFC(x_test)


s_v_m = [accuracy_score(y_test,y_pred_svc),recall_score(y_test,y_pred_svc,average='weighted'),precision_score(y_test,y_pred_svc,average='weighted'),f1_score(y_test,y_pred_svc,average='weighted')]
naive_b = [accuracy_score(y_test,y_pred_naive),recall_score(y_test,y_pred_naive,average='weighted'),precision_score(y_test,y_pred_naive,average='weighted'),f1_score(y_test,y_pred_naive,average='weighted')]
d_t_c = [accuracy_score(y_test,y_pred_DTC),recall_score(y_test,y_pred_DTC,average='weighted'),precision_score(y_test,y_pred_DTC,average='weighted'),f1_score(y_test,y_pred_DTC,average='weighted')]
r_f_c = [accuracy_score(y_test,y_pred_RFC),recall_score(y_test,y_pred_RFC,average='weighted'),precision_score(y_test,y_pred_RFC,average='weighted'),f1_score(y_test,y_pred_RFC,average='weighted')]


#creating own test splits and finding models metrics 
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest = train_test_split(x_train,y_train,test_size=0.5,random_state=47)

y_pred_svc= svc(xtrain)
y_pred_DTC = DTC(xtest)
y_pred_naive = naive(xtest)
y_pred_RFC = RFC(xtest)


s_v_m = [accuracy_score(ytrain,y_pred_svc),recall_score(ytrain,y_pred_svc,average='weighted'),precision_score(ytrain,y_pred_svc,average='weighted'),f1_score(ytrain,y_pred_svc,average='weighted')]
naive_b = [accuracy_score(ytest,y_pred_naive),recall_score(ytest,y_pred_naive,average='weighted'),precision_score(ytest,y_pred_naive,average='weighted'),f1_score(ytest,y_pred_naive,average='weighted')]
d_t_c = [accuracy_score(ytest,y_pred_DTC),recall_score(ytest,y_pred_DTC,average='weighted'),precision_score(ytest,y_pred_DTC,average='weighted'),f1_score(ytest,y_pred_DTC,average='weighted')]
r_f_c = [accuracy_score(ytest,y_pred_RFC),recall_score(ytest,y_pred_RFC,average='weighted'),precision_score(ytest,y_pred_RFC,average='weighted'),f1_score(ytest,y_pred_RFC,average='weighted')]


